---
// src/components/Calendar.astro
const eventFiles = await Astro.glob('../content/events/*.md');
const today = new Date();
const initialMonth = today.getMonth();
const initialYear = today.getFullYear();

// Process events
const events = eventFiles.map(event => ({
  ...event.frontmatter,
  date: new Date(event.frontmatter.start_date),
  slug: event.file.split('/').pop().split('.').shift()
})).filter(event => !isNaN(event.date.getTime()));

// Get days in month
function getDaysInMonth(year, month) {
  return new Date(year, month + 1, 0).getDate();
}

// Get first day of month (0-6 where 0 is Monday)
function getFirstDayOfMonth(year, month) {
  let day = new Date(year, month, 1).getDay();
  return day === 0 ? 6 : day - 1; // Convert to Monday-based week (0=Monday, 6=Sunday)
}

// Generate calendar grid
function generateCalendar(year, month, events) {
  const daysInMonth = getDaysInMonth(year, month);
  const firstDay = getFirstDayOfMonth(year, month);
  const days = [];

  // Previous month days
  const prevMonthDays = getDaysInMonth(year, month - 1);
  for (let i = firstDay; i > 0; i--) {
    days.push({
      day: prevMonthDays - i + 1,
      currentMonth: false,
      hasEvent: false
    });
  }

  // Current month days
  for (let i = 1; i <= daysInMonth; i++) {
    const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(i).padStart(2, '0')}`;
    const dateEvents = events.filter(event =>
      event.date.toISOString().split('T')[0] === dateStr
    );
    days.push({
      day: i,
      currentMonth: true,
      hasEvent: dateEvents.length > 0,
      isToday: today.getDate() === i && today.getMonth() === month && today.getFullYear() === year,
      events: dateEvents
    });
  }

  // Next month days
  const totalCells = Math.ceil(days.length / 7) * 7;
  const remainingDays = totalCells - days.length;
  for (let i = 1; i <= remainingDays; i++) {
    days.push({
      day: i,
      currentMonth: false,
      hasEvent: false
    });
  }

  return days;
}

const monthNames = ["STYCZEŃ", "LUTY", "MARZEC", "KWIECIEŃ", "MAJ", "CZERWIEC",
                   "LIPIEC", "SIERPIEŃ", "WRZESIEŃ", "PAŹDZIERNIK", "LISTOPAD", "GRUDZIEŃ"];
const dayNames = ["Pn", "Wt", "Śr", "Cz", "Pt", "So", "Nd"];

// Get unique event types for legend
const eventTypes = [...new Set(events.map(event => event.type))];
---

<div class="bg-gray-800 rounded-xl p-5 mb-6" id="calendar-container">
  <h3 class="text-xl font-bold mb-4 text-white text-center">KALENDARZ</h3>
  <div class="bg-gray-900 rounded-lg p-4">
    <div class="flex justify-between items-center mb-4">
      <button
        class="text-white hover:text-primary transition-colors"
        id="prev-month"
      >
        &lt;
      </button>
      <span class="text-xl font-bold text-white" id="month-year">
        {monthNames[initialMonth]} {initialYear}
      </span>
      <button
        class="text-white hover:text-primary transition-colors"
        id="next-month"
      >
        &gt;
      </button>
    </div>

    <!-- Day names -->
    <div class="grid grid-cols-7 gap-2 mb-2">
      {dayNames.map(day => (
        <div class="text-center text-gray-500 font-medium">{day}</div>
      ))}
    </div>

    <!-- Calendar grid -->
    <div class="grid grid-cols-7 gap-2" id="calendar-grid">
      {generateCalendar(initialYear, initialMonth, events).map((day, index) => (
        <div
          class={`text-center py-1 rounded-full relative calendar-day
                 ${day.currentMonth ? 'text-white' : 'text-gray-600'}
                 ${day.isToday ? 'border-2 border-primary' : ''}
                 ${day.hasEvent ? 'bg-primary text-white font-bold' : ''}`}
        >
          {day.day}
          {day.events?.length > 0 && (
            <div
              class="hidden absolute z-10 bottom-full left-1/2 transform -translate-x-1/2 mb-2 p-2 bg-gray-700 text-white text-sm rounded whitespace-nowrap tooltip"
            >
              {day.events.map(event => (
                <div>{event.title}</div>
              ))}
            </div>
          )}
        </div>
      ))}
    </div>

    <!-- Event legend -->
    {eventTypes.length > 0 && (
      <div class="mt-4 space-y-2">
        {eventTypes.map(type => (
          <div class="flex items-center">
            <div class="w-3 h-3 bg-primary rounded-full mr-2"></div>
            <span class="text-sm text-gray-300 capitalize">{type}</span>
          </div>
        ))}
      </div>
    )}
  </div>
</div>

<style>
  .calendar-day {
    aspect-ratio: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
  }
  .calendar-day:hover .tooltip {
    display: block !important;
  }
</style>

<script is:inline>
  // Initialize calendar state
  let currentMonth = new Date().getMonth();
  let currentYear = new Date().getFullYear();
  const eventsData = JSON.parse(`<%= JSON.stringify(events) %>`);
  const monthNames = ["STYCZEŃ", "LUTY", "MARZEC", "KWIECIEŃ", "MAJ", "CZERWIEC",
                     "LIPIEC", "SIERPIEŃ", "WRZESIEŃ", "PAŹDZIERNIK", "LISTOPAD", "GRUDZIEŃ"];

  // DOM elements
  const monthYearElement = document.getElementById('month-year');
  const calendarGrid = document.getElementById('calendar-grid');
  const prevMonthBtn = document.getElementById('prev-month');
  const nextMonthBtn = document.getElementById('next-month');

  // Function to update calendar display
  function updateCalendar(year, month) {
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    const firstDay = new Date(year, month, 1).getDay();
    const adjustedFirstDay = firstDay === 0 ? 6 : firstDay - 1; // Monday-based

    let days = [];
    // Previous month days
    const prevMonthDays = new Date(year, month, 0).getDate();
    for (let i = 0; i < adjustedFirstDay; i++) {
      days.push({
        day: prevMonthDays - adjustedFirstDay + i + 1,
        currentMonth: false,
        hasEvent: false
      });
    }

    // Current month days
    const today = new Date();
    for (let i = 1; i <= daysInMonth; i++) {
      const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(i).padStart(2, '0')}`;
      const dateEvents = eventsData.filter(event => {
        const eventDate = new Date(event.date);
        return eventDate.toISOString().split('T')[0] === dateStr;
      });
      days.push({
        day: i,
        currentMonth: true,
        hasEvent: dateEvents.length > 0,
        isToday: today.getDate() === i && today.getMonth() === month && today.getFullYear() === year,
        events: dateEvents
      });
    }

    // Next month days
    const totalCells = Math.ceil(days.length / 7) * 7;
    const remainingDays = totalCells - days.length;
    for (let i = 1; i <= remainingDays; i++) {
      days.push({
        day: i,
        currentMonth: false,
        hasEvent: false
      });
    }

    // Update month/year display
    monthYearElement.textContent = `${monthNames[month]} ${year}`;

    // Render calendar days
    calendarGrid.innerHTML = days.map(day => {
      let dayClasses = [
        'text-center',
        'py-1',
        'rounded-full',
        'relative',
        'calendar-day',
        day.currentMonth ? 'text-white' : 'text-gray-600',
        day.isToday ? 'border-2 border-primary' : '',
        day.hasEvent ? 'bg-primary text-white font-bold' : ''
      ].filter(Boolean).join(' ');

      let tooltipContent = '';
      if (day.events?.length > 0) {
        tooltipContent = `
          <div class="hidden absolute z-10 bottom-full left-1/2 transform -translate-x-1/2 mb-2 p-2 bg-gray-700 text-white text-sm rounded whitespace-nowrap tooltip">
            ${day.events.map(event => `<div>${event.title}</div>`).join('')}
          </div>
        `;
      }

      return `
        <div class="${dayClasses}">
          ${day.day}
          ${tooltipContent}
        </div>
      `;
    }).join('');
  }

  // Event listeners for month navigation
  prevMonthBtn.addEventListener('click', () => {
    currentMonth--;
    if (currentMonth < 0) {
      currentMonth = 11;
      currentYear--;
    }
    updateCalendar(currentYear, currentMonth);
  });

  nextMonthBtn.addEventListener('click', () => {
    currentMonth++;
    if (currentMonth > 11) {
      currentMonth = 0;
      currentYear++;
    }
    updateCalendar(currentYear, currentMonth);
  });

  // Initialize the calendar
  updateCalendar(currentYear, currentMonth);
</script>
