---
const { events } = Astro.props;
const today = new Date();
const monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
---

<div class="bg-white rounded-xl shadow-lg overflow-hidden">
  <div class="bg-blue-600 text-white py-4 px-6">
    <h2 class="text-xl font-semibold">Event Calendar</h2>
    <p class="text-blue-100">{monthNames[today.getMonth()]} {today.getFullYear()}</p>
  </div>
  <div class="p-4">
    <div class="grid grid-cols-7 gap-1 mb-4">
      {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (
        <div class="text-center text-gray-500 font-medium py-2">{day}</div>
      ))}
    </div>

    <div class="grid grid-cols-7 gap-1">
      {/* Placeholder for empty days */}
      {Array.from({ length: new Date(today.getFullYear(), today.getMonth(), 1).getDay() }).map((_, i) => (
        <div class="text-center text-gray-300 p-2">{new Date(today.getFullYear(), today.getMonth(), 0 - i).getDate()}</div>
      ))}

      {/* Current month days */}
      {Array.from({ length: new Date(today.getFullYear(), today.getMonth() + 1, 0).getDate() }).map((_, i) => {
        const day = i + 1;
        const dateStr = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
        const dayEvents = events.filter(e => e.date.startsWith(dateStr));

        return (
          <div class={`text-center p-2 ${day === today.getDate() ? 'bg-blue-100 rounded-full' : ''}`}>
            {day}
            {dayEvents.length > 0 && (
              <div class="flex justify-center mt-1">
                {dayEvents.map(event => (
                  <div class={`w-2 h-2 rounded-full mx-px bg-${event.color}-500`} title={event.title}></div>
                ))}
              </div>
            )}
          </div>
        );
      })}
    </div>
  </div>
</div>
